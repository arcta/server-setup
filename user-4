#!/bin/bash

########################################################################
### setup virtual environment and local user libraries
########################################################################
cd ~
. .local.cnf

mkdir .env
virtualenv -p python3 --no-site-packages .env
cd .env/bin
source activate
pip install --upgrade pip

if [ -f requirements.txt ]; then
    pip install -r requirements.txt

else
    pip install -U numpy
    pip install -U scipy
    pip install -U sympy
    pip install -U matplotlib
    pip install -U scikit-learn
    pip install -U pandas
    pip install -U pyyaml nltk
    pip install -U Cython
    pip install -U jupyter

    ### DBs
    pip install -U mysqlclient
    pip install -U elasticsearch
    pip install -U pymongo
    pip install -U redis

    ### utils
    pip install -U uwsgi
    pip install -U flask
    pip install -U boto
    pip install -U oauth2
    pip install -U oauth2client
    pip install -U google-api-python-client

    ### geo-spacial
    pip install -U pyproj

    ### user-favs
    if [ -f ~/install-user-pip.txt ]; then
        while IFS= read -r pack; do
            if [ -n "$pack" ]; then
                pip install -U "$pack"
            fi
        done < ~/install-user-pip.txt
    fi

    pip freeze > requirements.txt
fi

cd ~
. .local.cnf

### notebook-server configuration
jupyter notebook --generate-config
sed -i "s/# c.IPKernelApp.pylab =/c.IPKernelApp.pylab =/1" \
            ~/.jupyter/jupyter_notebook_config.py
sed -i "s/c.IPKernelApp.pylab = None/c.IPKernelApp.pylab = 'inline'/1" \
            ~/.jupyter/jupyter_notebook_config.py
sed -i "s/# c.NotebookApp.ip =/c.NotebookApp.ip =/1" \
            ~/.jupyter/jupyter_notebook_config.py
sed -i "s/# c.NotebookApp.port = 8888/c.NotebookApp.port = ${NODE_NOTEBOOK_PORT}/1" \
            ~/.jupyter/jupyter_notebook_config.py
sed -i "s/# c.NotebookApp.open_browser =/c.NotebookApp.open_browser =/1" \
            ~/.jupyter/jupyter_notebook_config.py
sed -i "s/c.NotebookApp.open_browser = True/c.NotebookApp.open_browser = False/1" \
            ~/.jupyter/jupyter_notebook_config.py
sed -i "s/# c.NotebookApp.trust_xheaders =/c.NotebookApp.trust_xheaders =/1" \
            ~/.jupyter/jupyter_notebook_config.py
sed -i "s/c.NotebookApp.trust_xheaders = False/c.NotebookApp.trust_xheaders = True/1" \
            ~/.jupyter/jupyter_notebook_config.py
sed -i "s/# c.NotebookApp.base_project_url = '\/'/c.NotebookApp.base_project_url = '\/notebook\/'/1" \
            ~/.jupyter/jupyter_notebook_config.py
sed -i "s/# c.NotebookApp.base_url = '\/'/c.NotebookApp.base_url = '\/notebook\/'/1" \
            ~/.jupyter/jupyter_notebook_config.py
sed -i "s/# c.NotebookApp.webapp_settings = {}/c.NotebookApp.webapp_settings = {'static_url_prefix':'\/notebook\/static\/'}/1" \
            ~/.jupyter/jupyter_notebook_config.py

echo "Setting mysql user ..."
echo "
CREATE DATABASE ${NODE_DATABASE};
CREATE USER '${NODE_DATAUSER}'@'localhost' IDENTIFIED BY '${NODE_MYSQL_PASS}';
GRANT SELECT, UPDATE, INSERT ON ${NODE_DATABASE}.* TO '${NODE_DATAUSER}'@'localhost';
FLUSH PRIVILEGES;
" > .datauser.sql
mysql -u root -p$NODE_MYSQL_ROOT_PASS mysql < .datauser.sql 2> /dev/null
rm .datauser.sql

echo "Installing R packages ..."
R CMD BATCH install-packages.R
echo "# local configuration used by R
[client]
user = $NODE_DATAUSER
password = $NODE_MYSQL_PASS
host = localhost
database = $NODE_DATABASE
" > .my.cnf

echo "Setting mongo auth ..."
echo "
db.createUser({ user: 'root', pwd: '$NODE_MONGO_ROOT_PASS', roles: [ { role: 'userAdminAnyDatabase', db: 'admin' } ] });
db = db.getSiblingDB('$NODE_DATABASE');
db.createUser({ user: '$NODE_DATAUSER', pwd: '$NODE_MONGO_PASS', roles: [ { role: 'readWrite', db: '$NODE_DATABASE' } ] });
" > mongo.js
mongo admin mongo.js
sudo sed -i "s/#security:/security:\n  authorization: enabled/1" /etc/mongod.conf
sudo service mongod restart
rm mongo.js

echo '
{
    "name": "node-setup",
    "description": "default node-modules",
    "repository": {
        "type": "git",
        "url": ""
     },
    "version": "0.0.0",
    "private": true,
    "dependencies": {
        "express": "^4.14.0",

        "serve-favicon": "*",
        "serve-static": "*",
        "express-session": "*",
        "errorhandler": "*",
        "underscore": "*",
        "compression": "*",
        "body-parser": "*",
        "intel": "*",

        "mysql": "*",
        "mongodb": "*",
        "elasticsearch": "*",
        "redis": "*",
        "connect-redis": "*",
        "express-redis-cache": "*"
    }
}
' > package.json
npm install
sudo npm install -g pm2
sudo pm2 startup ubuntu -u $USER
sudo chown -R $USER:$USER .pm2

mkdir logs

tee -a .local.cnf <<EOF
### make sure you are in the proper env ################################
. ${HOME}/.env/bin/activate
########################################################################
EOF

. .local.cnf

### projects
mkdir ~/$NODE_DOC_ROOT
DIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)
echo $DIR
rsync -av ${DIR}/project ~/
rsync -av ${DIR}/scripts/* ~/$NODE_DOC_ROOT/
rsync -av ${DIR}/*.ipynb ~/$NODE_DOC_ROOT/
rsync -av ${DIR}/*.html ~/$NODE_DOC_ROOT/
rsync -av ${DIR}/*.md ~/$NODE_DOC_ROOT/

cp ~/project/gitignore ~/$NODE_DOC_ROOT/.gitignore
. ~/project/create info
rsync -av ${DIR}/app-static/* ~/$NODE_DOC_ROOT/info/app/static/
cd ~/$NODE_DOC_ROOT/info/app && npm install

### projects utilities
#. ~/project/create utilities
# cd ~/$NODE_DOC_ROOT
# rm -rf utilities
# git clone git@github.com:arcta/utilities.git
# cd utilities
# pip install -e .

cd ~

# if ! [ -d '.ssh' ]; then
#     mkdir .ssh
# fi
# ssh-keygen -t rsa -C "$GIT_USER_EMAIL"
# ssh-add ~/.ssh/id_rsa

echo 'Done:'
pip freeze
